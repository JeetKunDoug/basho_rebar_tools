%% -*- mode: erlang; erlang-indent-level: 4; indent-tabs-mode: nil -*-
%% -------------------------------------------------------------------
%%
%% Copyright (c) 2016 Basho Technologies, Inc.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%
%% -------------------------------------------------------------------

%%
%% This is the basis of the default rebar.config file.
%%
%% This file is read as Erlang terms.
%% As such, no comments or formatting are maintained.
%%
%% It's best NOT to include any plugins or dependencies here, as they'll be
%% added programatically and there are scenarios where Bad Things could happen.
%%

%
% Alas, rebar doesn't do what we'd really like it to regarding 'debug_info'
% and 'no_debug_info'. 'no_debug_info' isn't a real compiler option, so
% it's removed from the compiler options - it's only effect is to prevent
% the explicit addition of the 'debug_info' option, which is the rebar
% default.
%
% Unfortunately, dependencies are *always* compiled with their 'prod' profile,
% in which you'd want 'no_debug_info' in any kind of sane world, but that
% means neither dialyzer nor xref see modules with debug info in them,
% preventing them from doing their jobs.
%
% I can't really analyze this properly until I've got a working build tree with
% the new structure, so for the time being the 'prod' profile contains the
% implicit 'debug_info' switch by NOT containing the 'no_debug_info' switch.
%

{'erl_opts', [
    % 'no_auto_import',
    'warn_export_all',
    'warn_export_vars',
    'warn_obsolete_guard',
    'warnings_as_errors'
]}.

{'cover_enabled', 'true'}.

{'edoc_opts', [{'preprocess', 'true'}]}.

{'eunit_opts', ['verbose']}.

{'profiles', [
    %
    % For Dialyzer and Xref.
    %
    {'check', [
        {'erl_opts', [
            'debug_info',
            'warn_unused_import',
            {'d', 'basho_check'}
        ]}
    ]},
    %
    % This is the default when built as a dependency.
    %
    {'prod', [
        {'erl_opts', [
            % see the lengthy comment above
            % 'no_debug_info',
            'warn_unused_import',
            {'d', 'basho_prod'}
        ]}
    ]},
    %
    % This is the default when running EUnit or Common Test.
    %
    {'test', [
        {'erl_opts', [
            'debug_info',
            'nowarn_deprecated_function',
            'nowarn_unused_function',
            {'d', 'basho_test'}
        ]}
    ]},
    %
    % Source analysis only, no beams produced.
    %
    {'validate', [
        {'erl_opts', [
            'strong_validation',
            'warn_missing_spec',    % really want this to be global
            'warn_untyped_record',  % really want this to be global
            'warn_unused_import',
            {d, 'basho_validate'}
        ]}
    ]}
]}.

{'dialyzer', [
    {'warnings', [
        'error_handling',
        'race_conditions',  % do we dare enable this?
        'unknown',
        'unmatched_returns'
    ]}
]}.

{'xref_checks', [
    'deprecated_function_calls',
    'deprecated_functions',
    'locals_not_used',
    'undefined_function_calls',
    'undefined_functions'
]}.
